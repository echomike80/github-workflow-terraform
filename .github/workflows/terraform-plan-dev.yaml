name: Terraform Infrastructure Deployment Pipeline
 
on:
  push:
    branches:
      - 'feature/*'
  pull_request:
    branches:
      - 'feature/*'
 
env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 
jobs:
  terraform-plan:
    name: Terraform Infrastructure Planning
    runs-on: [ubuntu-latest]
    environment: dev
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
       
      - name: Setup node (required for terraform action)
        uses: actions/setup-node@v2
        with:
          node-version: '14'
  
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform init
        working-directory: ./
        id: init
        run: terraform init -backend-config="bucket=example-dev-20231208-tfstate"

#     - name: Terraform format
#       id: fmt
#       working-directory: ./
#       run: terraform fmt -check
    
      - name: Terraform validate
        working-directory: ./
        id: validate
        run: terraform validate
  
      - name: Terraform plan
        working-directory: ./
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false ‚Äìvar-file=variables/vars_dev.tfvars
        continue-on-error: true
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
  
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # terraform-apply:
  #   needs: terraform-plan 
  #   name: Terraform Infrastructure Deployment
  #   runs-on: [ubuntu-latest]
  #   environment: dev
  #   steps:
  #     - name: Terraform Plan Status
  #       working-directory: ./
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1
  
  #     - name: Terraform Apply
  #       working-directory: ./
  #       if: github.ref == 'refs/heads/development' && github.event_name == 'push'
  #       run: terraform apply -auto-approve -input=false ‚Äìvar-file=variables/vars_dev.tfvars
